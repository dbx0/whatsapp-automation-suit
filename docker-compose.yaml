version: '3.8'

services:
  # ============================================================================
  # CHATWOOT SERVICES
  # ============================================================================
  
  # Base configuration for Chatwoot services
  chatwoot-base: &chatwoot-base
    image: chatwoot/chatwoot:v4.0.4
    container_name: chatwoot-base
    hostname: chatwoot-base
    env_file: .env
    stdin_open: true
    tty: true
    networks:
      - whatsapp-network
    depends_on:
      - postgres-chatwoot
      - redis-chatwoot
    restart: unless-stopped

  # Chatwoot Rails server
  chatwoot-rails:
    <<: *chatwoot-base
    container_name: chatwoot-rails
    hostname: chatwoot-rails
    ports:
      - "${PORT_RANGE_BASE:-3000}:3000"
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - RAILS_LOG_TO_STDOUT=true
    entrypoint: docker/entrypoints/rails.sh
    command: ['bundle', 'exec', 'rails', 'server', '-p', '3000', '-b', '0.0.0.0']
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chatwoot Sidekiq worker
  chatwoot-sidekiq:
    <<: *chatwoot-base
    container_name: chatwoot-sidekiq
    hostname: chatwoot-sidekiq
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - RAILS_LOG_TO_STDOUT=true
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "sidekiq"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # DATABASE SERVICES
  # ============================================================================

  # PostgreSQL for Chatwoot
  postgres-chatwoot:
    image: postgres:16-alpine
    container_name: postgres-chatwoot
    hostname: postgres-chatwoot
    ports:
      - "$((${PORT_RANGE_BASE:-3000} + 1)):5432"
    restart: always
    volumes:
      - ./database/chatwoot/postgres:/var/lib/postgresql/data
      - ./database/chatwoot/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=chatwoot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-chatwoot_secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatwoot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Evolution API
  postgres-evolution:
    image: postgres:16-alpine
    container_name: postgres-evolution
    hostname: postgres-evolution
    ports:
      - "$((${PORT_RANGE_BASE:-3000} + 2)):5432"
    restart: always
    volumes:
      - ./database/evolution/postgres:/var/lib/postgresql/data
      - ./database/evolution/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=evolution
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${EVOLUTION_POSTGRES_PASSWORD:-evolution_secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d evolution"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # CACHE SERVICES
  # ============================================================================

  # Redis for Chatwoot
  redis-chatwoot:
    image: redis:7.2-alpine
    container_name: redis-chatwoot
    hostname: redis-chatwoot
    ports:
      - "$((${PORT_RANGE_BASE:-3000} + 3)):6379"
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-redis_secure_password}", "--appendonly", "yes"]
    volumes:
      - ./database/chatwoot/redis:/data
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Redis for Evolution API
  redis-evolution:
    image: redis:7.2-alpine
    container_name: redis-evolution
    hostname: redis-evolution
    ports:
      - "$((${PORT_RANGE_BASE:-3000} + 4)):6379"
    restart: always
    command: ["redis-server", "--appendonly", "yes", "--port", "6379"]
    env_file:
      - ./evolution-api/.env
    volumes:
      - ./database/evolution/redis:/data
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================================================
  # EVOLUTION API
  # ============================================================================

  evolution-api:
    image: atendai/evolution-api:v2.2.0
    container_name: evolution-api
    hostname: evolution-api
    ports:
      - "$((${PORT_RANGE_BASE:-3000} + 5)):8080"
    volumes:
      - ./evolution-api/evolution_instances:/evolution/instances
      - ./evolution-api/logs:/evolution/logs
    networks:
      - whatsapp-network
    env_file:
      - ./evolution-api/.env
    depends_on:
      - postgres-evolution
      - redis-evolution
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # ADMINISTRATION TOOLS
  # ============================================================================

  # PgAdmin for database administration
  pgadmin:
    image: dpage/pgadmin4:8.5
    container_name: pgadmin
    hostname: pgadmin
    ports:
      - "$((${PORT_RANGE_BASE:-3000} + 6)):80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    depends_on:
      - postgres-chatwoot
      - postgres-evolution
    networks:
      - whatsapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # AUTOMATION PLATFORM
  # ============================================================================

  # n8n automation platform (opcional)
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    hostname: n8n
    profiles:
      - n8n
    ports:
      - "$((${PORT_RANGE_BASE:-3000} + 7)):5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/Sao_Paulo
    volumes:
      - ./n8n-data:/home/node/.n8n
    networks:
      - whatsapp-network
    depends_on:
      - evolution-api
      - chatwoot-rails
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  whatsapp-network:
    name: whatsapp-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  chatwoot_postgres_data:
    driver: local
  chatwoot_redis_data:
    driver: local
  evolution_postgres_data:
    driver: local
  evolution_redis_data:
    driver: local
  evolution_instances:
    driver: local
